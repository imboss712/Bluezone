{"version":3,"sources":["ui/styles/globalStyles.js","../../src/Path.tsx","../../src/CircularProgressbar.tsx","../../src/constants.ts","../../src/buildStyles.ts","containers/SingleMatch/ComponentHelper/Participants/ParticipantsHelper/ParticipantCount.js","containers/SingleMatch/ComponentHelper/ShortInfo/ShortInfo.js"],"names":["globalStyles","makeStyles","theme","root","maxWidth","margin","paper","marginTop","spacing","padding","breakpoints","down","box","headingText","marginBottom","color","palette","text","secondary","headingIcon","fontSize","submitButton","display","justifyContent","Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","React.createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","React.Component","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","pathRatio","viewBox","cx","cy","r","trail","path","x","y","defaultProps","buildStyles","strokeLinecap","textColor","textSize","pathColor","pathTransition","pathTransitionDuration","trailColor","backgroundColor","rotationTransform","undefined","rotationTransformOrigin","removeUndefinedValues","stroke","transform","transformOrigin","transition","transitionDuration","fill","obj","keys","forEach","key","useStyles","progressBar","height","textAlign","ParticipantCount","count","Typography","variant","sx","Box","SendIdPwd","lazy","MyTeam","position","top","bottom","zIndex","marginLeft","statusText","connect","state","user","auth","sharedClasses","tournamentId","participantStatus","entryFees","participants","matchStatus","statusPara","Paper","clsx","Divider","role","fallback","SuspenseLoading"],"mappings":"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","file":"static/js/57.f24c993b.chunk.js","sourcesContent":["import makeStyles from '@mui/styles/makeStyles';\r\n\r\nconst globalStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 600,\r\n    margin: 'auto'\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(2),\r\n    padding: theme.spacing(3, 4),\r\n    [theme.breakpoints.down('md')]: {\r\n      padding: theme.spacing(2.8, 3)\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: theme.spacing(2.6, 2)\r\n    },\r\n    borderRadius: theme.spacing(0.75),\r\n    textAlign: 'center'\r\n  },\r\n  box: {\r\n    margin: theme.spacing(3, 4),\r\n    [theme.breakpoints.down('md')]: {\r\n      margin: theme.spacing(2.8, 2.8)\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      margin: theme.spacing(2.6, 1.5)\r\n    }\r\n  },\r\n  headingText: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(4),\r\n    color: theme.palette.text.secondary\r\n  },\r\n  headingIcon: {\r\n    fontSize: theme.spacing(6),\r\n    color: '#3f51b5'\r\n  },\r\n  submitButton: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end'\r\n  }\r\n}));\r\n\r\nexport default globalStyles;\r\n","import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","import { CircularProgressbarStyles } from './types';\n\nexport default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor,\n}: {\n  rotation?: number; // Number of turns, 0-1\n  strokeLinecap?: any;\n  textColor?: string;\n  textSize?: string | number;\n  pathColor?: string;\n  pathTransition?: string;\n  pathTransitionDuration?: number; // Measured in seconds\n  trailColor?: string;\n  backgroundColor?: string;\n}): CircularProgressbarStyles {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`;\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center';\n\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`,\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize,\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor,\n    }),\n  };\n}\n\nfunction removeUndefinedValues(obj: { [key: string]: any }) {\n  Object.keys(obj).forEach((key: string) => {\n    if (obj[key] == null) {\n      delete obj[key];\n    }\n  });\n  return obj;\n}\n","import React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  progressBar: {\r\n    padding: theme.spacing(3),\r\n    height: '120px',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    textAlign: 'center'\r\n  }\r\n}));\r\n\r\nconst ParticipantCount = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const { count } = props;\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" sx={{ color: 'text.secondary' }}>\r\n        Participants\r\n      </Typography>\r\n\r\n      <Box className={classes.progressBar}>\r\n        <CircularProgressbar\r\n          value={count}\r\n          minValue={0}\r\n          maxValue={100}\r\n          text={`${count}/100`}\r\n          strokeWidth={7}\r\n          styles={buildStyles({\r\n            textColor: '#3f51b5',\r\n            pathColor: '#3f51b5'\r\n          })}\r\n        />\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ParticipantCount;\r\n","import React, { lazy, Suspense } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport clsx from 'clsx';\r\nimport Paper from '@mui/material/Paper';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n\r\nimport SuspenseLoading from '../../../../ui/Loading/SuspenseLoading';\r\nimport globalStyles from '../../../../ui/styles/globalStyles';\r\n\r\nimport ParticipantCount from '../Participants/ParticipantsHelper/ParticipantCount';\r\nconst SendIdPwd = lazy(() =>\r\n  import('../Participants/ParticipantsHelper/SendIdPwd')\r\n);\r\nconst MyTeam = lazy(() => import('../Participants/MyTeam/MyTeam'));\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'sticky',\r\n    top: 10,\r\n    bottom: 10,\r\n    zIndex: 5,\r\n    marginLeft: 'auto'\r\n  },\r\n  statusText: {\r\n    margin: theme.spacing(1, 0),\r\n    padding: theme.spacing(0.4, 0.3)\r\n  }\r\n}));\r\n\r\nconst ShortInfo = (props) => {\r\n  const classes = useStyles();\r\n  const sharedClasses = globalStyles();\r\n\r\n  const {\r\n    tournamentId,\r\n    participantStatus,\r\n    entryFees,\r\n    participants,\r\n    user,\r\n    matchStatus\r\n  } = props;\r\n\r\n  let statusPara = 'Tournament is open to participate.';\r\n\r\n  switch (matchStatus) {\r\n    case 'MailUnsent':\r\n      statusPara =\r\n        'Participation closed. Room Id and Password will be sent shortly.';\r\n      break;\r\n    case 'MailSent':\r\n      statusPara =\r\n        'Room Id and Password has been sent. Join the tournament as soon as possible.';\r\n      break;\r\n    case 'Live':\r\n      statusPara =\r\n        'Tournament is Live. No money will be refunded to players who have not joined.';\r\n      break;\r\n    case 'Completed':\r\n      statusPara = 'Tounament is finished. Result will be generated soon.';\r\n      break;\r\n    case 'Result':\r\n      statusPara = 'Result has been published.';\r\n      break;\r\n    default:\r\n      statusPara = `Tournament is ${matchStatus}`;\r\n      break;\r\n  }\r\n\r\n  return (\r\n    <Paper\r\n      className={clsx(classes.paper, sharedClasses.paper)}\r\n      variant=\"outlined\"\r\n    >\r\n      <ParticipantCount count={participants} />\r\n\r\n      <Divider />\r\n\r\n      <Box variant=\"outlined\" className={classes.statusText}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">\r\n          {matchStatus === 'Open' && participantStatus === 'Full'\r\n            ? 'Participant list is FUll.'\r\n            : statusPara}\r\n        </Typography>\r\n      </Box>\r\n\r\n      <Divider />\r\n\r\n      {user.role === 'admin' ? (\r\n        <Suspense fallback={<SuspenseLoading />}>\r\n          <SendIdPwd tournamentId={tournamentId} matchStatus={matchStatus} />\r\n        </Suspense>\r\n      ) : (\r\n        <Suspense fallback={<SuspenseLoading />}>\r\n          <MyTeam\r\n            tournamentId={tournamentId}\r\n            participantStatus={participantStatus}\r\n            entryFees={entryFees}\r\n          />\r\n        </Suspense>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  user: state.auth.user\r\n});\r\n\r\nexport default connect(mapStateToProps)(ShortInfo);\r\n"],"sourceRoot":""}