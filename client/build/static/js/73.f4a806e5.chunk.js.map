{"version":3,"sources":["containers/Profile/ComponentHelper/AvatarComponent.js"],"names":["useStyles","makeStyles","theme","avatarBox","padding","spacing","display","justifyContent","avatarLoading","textAlign","margin","avatar","width","height","noAvatar","backgroundColor","connect","state","profile","dispatch","onGetAvatar","userId","actions","onDeleteAvatar","props","classes","user","useEffect","_id","className","color","variant","overlap","anchorOrigin","vertical","horizontal","badgeContent","to","hasAvatar","size","onClick","src","alt","name","style","fontSize","charAt","toUpperCase"],"mappings":"mGAAA,4JAeMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,QAASF,EAAMG,QAAQ,KACvBC,QAAS,OACTC,eAAgB,UAElBC,cAAe,CACbC,UAAW,SACXC,OAAQR,EAAMG,QAAQ,KAAM,IAE9BM,OAAQ,CACNC,MAAOV,EAAMG,QAAQ,IACrBQ,OAAQX,EAAMG,QAAQ,KAExBS,SAAU,CACRF,MAAOV,EAAMG,QAAQ,MACrBQ,OAAQX,EAAMG,QAAQ,MACtBU,gBAAiB,cA4FNC,uBATS,SAACC,GAAD,MAAY,CAClCN,OAAQM,EAAMC,YAGW,SAACC,GAAD,MAAe,CACxCC,YAAa,SAACC,GAAD,OAAYF,EAASG,IAAkBD,KACpDE,eAAgB,kBAAMJ,EAASG,WAGlBN,EAxFS,SAACQ,GACvB,IAAMC,EAAUzB,IAGd0B,EAIEF,EAJFE,KACAN,EAGEI,EAHFJ,YACAG,EAEEC,EAFFD,eAHF,EAKIC,EADFb,OAAUH,EAJZ,EAIYA,cAAeG,EAJ3B,EAI2BA,OAG3BgB,qBAAU,WACRP,EAAYM,EAAKE,OAChB,CAACR,EAAaM,EAAKE,MAMtB,OACE,mCACGpB,EACC,cAAC,IAAD,CAAKqB,UAAWJ,EAAQjB,cAAxB,SACE,cAAC,IAAD,CAAYsB,MAAM,UAAUC,QAAQ,QAApC,mCAKF,cAAC,IAAD,CAAKF,UAAWJ,EAAQtB,UAAxB,SACE,cAAC,IAAD,CACE6B,QAAQ,WACRC,aAAc,CACZC,SAAU,SACVC,WAAY,SAEdC,aACE,qCACE,cAAC,IAAD,CAAMC,GAAIX,EAAKY,UAAY,iBAAmB,iBAA9C,SACE,cAAC,IAAD,CAAKC,KAAK,QAAQT,MAAM,UAAU,aAAW,gBAA7C,SACGJ,EAAKY,UACJ,cAAC,IAAD,IAEA,cAAC,IAAD,QAKLZ,EAAKY,WACJ,cAAC,IAAD,CACEC,KAAK,QACLT,MAAM,YACN,aAAW,gBACXU,QArCS,WACzBjB,KAgCc,SAME,cAAC,IAAD,SAzBV,SA+Bc,OAAXZ,EACC,cAAC,IAAD,CACE8B,IAAG,gCAA2B9B,GAC9B+B,IAAKhB,EAAKiB,KACVd,UAAWJ,EAAQd,SAGrB,cAAC,IAAD,CAAQ+B,IAAKhB,EAAKiB,KAAMd,UAAWJ,EAAQX,SAA3C,SACE,sBAAM8B,MAAO,CAAEC,SAAU,QAAzB,SACGnB,EAAKiB,KAAKG,OAAO,GAAGC","file":"static/js/73.f4a806e5.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport Box from '@mui/material/Box';\r\nimport Typography from '@mui/material/Typography';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Badge from '@mui/material/Badge';\r\nimport Fab from '@mui/material/Fab';\r\nimport AddPhotoAlternateRoundedIcon from '@mui/icons-material/AddPhotoAlternateRounded';\r\nimport EditRoundedIcon from '@mui/icons-material/EditRounded';\r\nimport DeleteRoundedIcon from '@mui/icons-material/DeleteRounded';\r\nimport makeStyles from '@mui/styles/makeStyles';\r\n\r\nimport * as actions from '../../../store/actions/index';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatarBox: {\r\n    padding: theme.spacing(1.5),\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n  },\r\n  avatarLoading: {\r\n    textAlign: 'center',\r\n    margin: theme.spacing(1.75, 0)\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(25),\r\n    height: theme.spacing(25)\r\n  },\r\n  noAvatar: {\r\n    width: theme.spacing(16.5),\r\n    height: theme.spacing(16.5),\r\n    backgroundColor: 'orange'\r\n  }\r\n}));\r\n\r\nconst AvatarComponent = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const {\r\n    user,\r\n    onGetAvatar,\r\n    onDeleteAvatar,\r\n    avatar: { avatarLoading, avatar }\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    onGetAvatar(user._id);\r\n  }, [onGetAvatar, user._id]);\r\n\r\n  const handleDeleteAvatar = () => {\r\n    onDeleteAvatar();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {avatarLoading ? (\r\n        <Box className={classes.avatarLoading}>\r\n          <Typography color=\"primary\" variant=\"body2\">\r\n            Fetching Avatar ...\r\n          </Typography>\r\n        </Box>\r\n      ) : (\r\n        <Box className={classes.avatarBox}>\r\n          <Badge\r\n            overlap=\"circular\"\r\n            anchorOrigin={{\r\n              vertical: 'bottom',\r\n              horizontal: 'right'\r\n            }}\r\n            badgeContent={\r\n              <>\r\n                <Link to={user.hasAvatar ? '/update-avatar' : '/upload-avatar'}>\r\n                  <Fab size=\"small\" color=\"primary\" aria-label=\"upload-avatar\">\r\n                    {user.hasAvatar ? (\r\n                      <EditRoundedIcon />\r\n                    ) : (\r\n                      <AddPhotoAlternateRoundedIcon />\r\n                    )}\r\n                  </Fab>\r\n                </Link>\r\n\r\n                {user.hasAvatar && (\r\n                  <Fab\r\n                    size=\"small\"\r\n                    color=\"secondary\"\r\n                    aria-label=\"delete-avatar\"\r\n                    onClick={handleDeleteAvatar}\r\n                  >\r\n                    <DeleteRoundedIcon />\r\n                  </Fab>\r\n                )}\r\n              </>\r\n            }\r\n          >\r\n            {avatar !== null ? (\r\n              <Avatar\r\n                src={`data:image/png;base64,${avatar}`}\r\n                alt={user.name}\r\n                className={classes.avatar}\r\n              />\r\n            ) : (\r\n              <Avatar alt={user.name} className={classes.noAvatar}>\r\n                <span style={{ fontSize: '80px' }}>\r\n                  {user.name.charAt(0).toUpperCase()}\r\n                </span>\r\n              </Avatar>\r\n            )}\r\n          </Badge>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  avatar: state.profile\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onGetAvatar: (userId) => dispatch(actions.getAvatar(userId)),\r\n  onDeleteAvatar: () => dispatch(actions.deleteAvatar())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AvatarComponent);\r\n"],"sourceRoot":""}